{
  "info": {
    "name": "Neighbour Approved API",
    "description": "WhatsApp-based local service endorsement platform API collection",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string"
    },
    {
      "key": "api_key",
      "value": "{{api_key}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🏥 Health Endpoints",
      "description": "Application health monitoring endpoints",
      "item": [
        {
          "name": "Basic Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/",
              "host": ["{{base_url}}"],
              "path": ["health", ""]
            },
            "description": "Basic health check endpoint - no authentication required"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has required health fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('modules');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Status is healthy or unhealthy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.be.oneOf(['healthy', 'unhealthy']);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Detailed Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/detailed",
              "host": ["{{base_url}}"],
              "path": ["health", "detailed"]
            },
            "description": "Detailed health check with component breakdown"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has detailed health structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('checks');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('All component checks have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const checks = responseJson.checks;",
                  "    ",
                  "    Object.keys(checks).forEach(component => {",
                  "        const check = checks[component];",
                  "        pm.expect(check).to.have.property('status');",
                  "        pm.expect(check).to.have.property('response_time_ms');",
                  "        pm.expect(check.status).to.be.oneOf(['healthy', 'unhealthy']);",
                  "        pm.expect(check.response_time_ms).to.be.a('number');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Basic Status Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/status",
              "host": ["{{base_url}}"],
              "path": ["status"]
            },
            "description": "Basic status endpoint showing system status (no security)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "🔧 Admin Endpoints",
      "description": "Administrative endpoints requiring API key authentication",
      "auth": {
        "type": "apikey",
        "apikey": [
          {
            "key": "key",
            "value": "X-API-Key",
            "type": "string"
          },
          {
            "key": "value",
            "value": "{{api_key}}",
            "type": "string"
          },
          {
            "key": "in",
            "value": "header",
            "type": "string"
          }
        ]
      },
      "item": [
        {
          "name": "Get Application Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/info",
              "host": ["{{base_url}}"],
              "path": ["admin", "info"]
            },
            "description": "Application metadata including version and environment"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has application info fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('app_name');",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    pm.expect(responseJson).to.have.property('environment');",
                  "    pm.expect(responseJson).to.have.property('build_timestamp');",
                  "    pm.expect(responseJson).to.have.property('python_version');",
                  "});",
                  "",
                  "pm.test('App name is neighbour-approved', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.app_name).to.include('neighbour-approved');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Safe Configuration",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/config",
              "host": ["{{base_url}}"],
              "path": ["admin", "config"]
            },
            "description": "Safe configuration display without sensitive information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has safe config fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('api_host');",
                  "    pm.expect(responseJson).to.have.property('api_port');",
                  "    pm.expect(responseJson).to.have.property('log_level');",
                  "    pm.expect(responseJson).to.have.property('metrics_enabled');",
                  "    pm.expect(responseJson).to.have.property('debug_mode');",
                  "});",
                  "",
                  "pm.test('No sensitive data exposed', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include('password');",
                  "    pm.expect(responseText).to.not.include('secret');",
                  "    pm.expect(responseText).to.not.include('key');",
                  "    pm.expect(responseText).to.not.include('token');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/services",
              "host": ["{{base_url}}"],
              "path": ["admin", "services"]
            },
            "description": "Service registry and infrastructure component status"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Service status fields are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('service_registry_active');",
                  "    pm.expect(responseJson).to.have.property('metrics_collector_active');",
                  "    pm.expect(responseJson).to.have.property('health_checker_active');",
                  "    pm.expect(responseJson).to.have.property('services_count');",
                  "});",
                  "",
                  "pm.test('Services count is reasonable', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.services_count).to.be.a('number');",
                  "    pm.expect(responseJson.services_count).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📱 WhatsApp Webhooks",
      "description": "WhatsApp message processing webhooks from GREEN-API",
      "auth": {
        "type": "apikey",
        "apikey": [
          {
            "key": "key",
            "value": "X-API-Key",
            "type": "string"
          },
          {
            "key": "value",
            "value": "{{api_key}}",
            "type": "string"
          },
          {
            "key": "in",
            "value": "header",
            "type": "string"
          }
        ]
      },
      "item": [
        {
          "name": "Process WhatsApp Group Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"typeWebhook\": \"incomingMessageReceived\",\n  \"chatId\": \"12345678901234567890@g.us\",\n  \"senderId\": \"27821234567@c.us\",\n  \"senderName\": \"Alice Johnson\",\n  \"textMessage\": \"I highly recommend John the plumber 082-123-4567! Fixed my kitchen sink perfectly and very affordable.\",\n  \"timestamp\": 1735470000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/message",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "message"]
            },
            "description": "Process incoming WhatsApp group message with endorsement content"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has processing result', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('action');",
                  "});",
                  "",
                  "pm.test('Processing time is reasonable', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.processing_time_ms) {",
                  "        pm.expect(responseJson.processing_time_ms).to.be.below(10000);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Group message processed appropriately', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal('processed');",
                  "    pm.expect(responseJson.action).to.include('group');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Process WhatsApp Individual Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"typeWebhook\": \"incomingMessageReceived\",\n  \"chatId\": \"27821234567@c.us\",\n  \"senderId\": \"27829876543@c.us\",\n  \"senderName\": \"Bob Smith\",\n  \"textMessage\": \"Hello, how are you today?\",\n  \"timestamp\": 1735470000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/message",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "message"]
            },
            "description": "Process individual WhatsApp message (should be skipped)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Individual message skipped', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.action).to.include('individual');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "WhatsApp Service Request Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"typeWebhook\": \"incomingMessageReceived\",\n  \"chatId\": \"12345678901234567890@g.us\",\n  \"senderId\": \"27821234567@c.us\",\n  \"senderName\": \"Sarah Williams\",\n  \"textMessage\": \"Anyone know a good electrician in the Johannesburg area? Need some rewiring work done urgently.\",\n  \"timestamp\": 1735470000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/message",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "message"]
            },
            "description": "Process service request message in group chat"
          },
          "response": []
        },
        {
          "name": "WhatsApp Message Webhook (Simple)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/message-webhook",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "message-webhook"]
            },
            "description": "Simple GREEN-API message webhook endpoint"
          },
          "response": []
        },
        {
          "name": "WhatsApp Status Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/status",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "status"]
            },
            "description": "GREEN-API message delivery status webhook"
          },
          "response": []
        },
        {
          "name": "WhatsApp Notification Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/webhooks/whatsapp/notification",
              "host": ["{{base_url}}"],
              "path": ["webhooks", "whatsapp", "notification"]
            },
            "description": "GREEN-API system notification webhook"
          },
          "response": []
        }
      ]
    },
    {
      "name": "📊 Metrics & Monitoring",
      "description": "Application metrics and monitoring endpoints",
      "item": [
        {
          "name": "Prometheus Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            },
            "description": "Prometheus metrics endpoint for monitoring and alerting"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response contains metrics data', function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable for metrics scraping', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for requests that need it",
          "pm.globals.set('timestamp', Math.floor(Date.now() / 1000));",
          "",
          "// Log request details in development",
          "if (pm.environment.get('environment') === 'development') {",
          "    console.log('Making request to:', pm.request.url.toString());",
          "    console.log('Environment:', pm.environment.name);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global response validations",
          "pm.test('Response is valid JSON or text', function () {",
          "    const contentType = pm.response.headers.get('Content-Type');",
          "    if (contentType && contentType.includes('application/json')) {",
          "        pm.expect(() => pm.response.json()).to.not.throw();",
          "    }",
          "});",
          "",
          "pm.test('Response has reasonable size', function () {",
          "    pm.expect(pm.response.responseSize).to.be.below(10000000); // 10MB limit",
          "});",
          "",
          "// Log response details in development",
          "if (pm.environment.get('environment') === 'development') {",
          "    console.log('Response status:', pm.response.code);",
          "    console.log('Response time:', pm.response.responseTime + 'ms');",
          "}"
        ]
      }
    }
  ]
}