services:
  # FastAPI Development Application
  api:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: fastapi-dev-api
    restart: unless-stopped

    # Development ports - expose directly
    ports:
      - "${API_PORT:-8000}:8000"
      - "${METRICS_PORT:-9090}:9090"  # Metrics port

    # Development environment
    environment:
      - APP_NAME=${APP_NAME:-fastapi-template}
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}

      # Database
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fastapi_dev}
      - DATABASE_TYPE=postgresql

      # Redis cache
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379

      # Observability
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - TRACING_ENABLED=false

      # Security (development)
      - INTERNAL_API_KEYS=${INTERNAL_API_KEYS:-dev_api_key}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-dev_webhook_secret}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=300

      # CORS for development
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080
      - CORS_CREDENTIALS=true

    # Mount source for hot reload
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./tests:/app/tests:ro

    # Basic health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    networks:
      - development

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database for Development
  postgres:
    image: postgres:17-alpine
    container_name: fastapi-dev-postgres
    restart: unless-stopped

    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-fastapi_dev}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8

    ports:
      - "5432:5432"

    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/postgres/init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-fastapi_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5

    networks:
      - development

  # Redis Cache for Development
  redis:
    image: redis:7-alpine
    container_name: fastapi-dev-redis
    restart: unless-stopped

    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes

    ports:
      - "6379:6379"

    volumes:
      - redis_dev_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

    networks:
      - development

  # Google Firestore Emulator
  firestore:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    container_name: fastapi-firestore
    command: >
      sh -c "
        gcloud beta emulators firestore start
        --host-port=0.0.0.0:8080
        --project=test-project
      "
    ports:
      - "8080:8080"
    environment:
      FIRESTORE_PROJECT_ID: test-project
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fastapi-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fastapi-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools

# Development network
networks:
  development:
    driver: bridge

# Development volumes
volumes:
  postgres_dev_data:
  redis_dev_data:
