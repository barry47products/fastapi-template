# Production Docker Compose with security hardening and resource management
# Use with Docker secrets for sensitive configuration

services:
  # FastAPI Production Application
  api:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-fastapi-template}:${IMAGE_TAG:-latest}
    container_name: fastapi-prod-api
    restart: unless-stopped

    # Production resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Production ports with rate limiting at ingress
    ports:
      - "${API_PORT:-8000}:8000"
      - "${METRICS_PORT:-9090}:9090"  # Prometheus metrics

    # Environment configuration - use secrets for sensitive values
    environment:
      # Application
      - APP_NAME=${APP_NAME:-fastapi-template}
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Database (use connection string from secret)
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DATABASE_TYPE=${DATABASE_TYPE:-postgresql}

      # Redis cache
      - REDIS_URL_FILE=/run/secrets/redis_url

      # Observability
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - TRACING_ENABLED=${TRACING_ENABLED:-false}
      - TRACING_ENDPOINT=${TRACING_ENDPOINT:-}

      # Security
      - INTERNAL_API_KEYS_FILE=/run/secrets/api_keys
      - WEBHOOK_SECRET_FILE=/run/secrets/webhook_secret
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}

      # CORS for production domains
      - CORS_ORIGINS=${CORS_ORIGINS:-https://app.example.com}
      - CORS_CREDENTIALS=true

    # Docker secrets mounting
    secrets:
      - database_url
      - redis_url
      - api_keys
      - webhook_secret

    # Health check for container orchestration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=api,environment=production"

    # Production networks
    networks:
      - frontend
      - backend
      - monitoring

    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.cache

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database with replication support
  postgres:
    image: postgres:17-alpine
    container_name: fastapi-prod-postgres
    restart: unless-stopped

    # Resource limits for database
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=${POSTGRES_DB:-fastapi_prod}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256

    secrets:
      - postgres_user
      - postgres_password

    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_backup:/backup:rw

    # Production tuning
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=1310kB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
      -c log_statement=all
      -c log_duration=on

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user) -d ${POSTGRES_DB:-fastapi_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=postgres,environment=production"

    networks:
      - backend

    security_opt:
      - no-new-privileges:true

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: fastapi-prod-redis
    restart: unless-stopped

    # Resource limits for cache
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

    # Redis with AOF persistence and security
    command: >
      redis-server
      --requirepass $${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 511
      --timeout 300
      --tcp-keepalive 60
      --protected-mode yes
      --port 6379
      --bind 0.0.0.0
      --save 900 1
      --save 300 10
      --save 60 10000

    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password

    secrets:
      - redis_password

    volumes:
      - redis_data:/data:rw
      - redis_backup:/backup:rw

    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=redis,environment=production"

    networks:
      - backend

    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: fastapi-prod-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx:rw
      - nginx_logs:/var/log/nginx:rw

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=nginx,environment=production"

    networks:
      - frontend
      - monitoring

    depends_on:
      - api

    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /tmp

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fastapi-prod-prometheus
    restart: unless-stopped

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    ports:
      - "9091:9090"

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

    networks:
      - monitoring
      - backend

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

    security_opt:
      - no-new-privileges:true

  # Grafana for visualisation (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fastapi-prod-grafana
    restart: unless-stopped
    profiles:
      - monitoring

    environment:
      - GF_SECURITY_ADMIN_USER_FILE=/run/secrets/grafana_user
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=redis-datasource

    secrets:
      - grafana_user
      - grafana_password

    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    ports:
      - "3000:3000"

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

    networks:
      - monitoring

    depends_on:
      - prometheus

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

    security_opt:
      - no-new-privileges:true

# Docker secrets configuration
secrets:
  database_url:
    external: true
  redis_url:
    external: true
  redis_password:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  api_keys:
    external: true
  webhook_secret:
    external: true
  grafana_user:
    external: true
  grafana_password:
    external: true

# Production networks
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Persistent volumes with backup support
volumes:
  postgres_data:
    driver: local
  postgres_backup:
    driver: local
  redis_data:
    driver: local
  redis_backup:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
