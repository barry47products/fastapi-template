services:
  # FastAPI application service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi-template-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Application configuration
      - APP_NAME=fastapi-template
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000

      # Database configuration
      - DATABASE_URL=postgresql://fastapi_user:fastapi_pass@postgres:5432/fastapi_db
      - DATABASE_TYPE=postgresql

      # Redis configuration
      - REDIS_URL=redis://redis:6379/0

      # Observability settings
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - METRICS_PORT=9090

      # Security settings (use secure values in production)
      - INTERNAL_API_KEYS=dev-key-12345
      - WEBHOOK_SECRET=dev-webhook-secret-67890
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100

      # CORS settings for development
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      # Mount source code for development (hot reload) - exclude .venv
      - ./src:/app/src
      - ./config:/app/config
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    command: ["/app/.venv/bin/python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    container_name: fastapi-postgres
    environment:
      POSTGRES_USER: fastapi_user
      POSTGRES_PASSWORD: fastapi_pass
      POSTGRES_DB: fastapi_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi_user -d fastapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Google Firestore Emulator
  firestore:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    container_name: fastapi-firestore
    command: >
      sh -c "
        gcloud beta emulators firestore start
        --host-port=0.0.0.0:8080
        --project=test-project
      "
    ports:
      - "8080:8080"
    environment:
      FIRESTORE_PROJECT_ID: test-project
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fastapi-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fastapi-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
