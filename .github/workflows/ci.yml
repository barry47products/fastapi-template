name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Cache MyPy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            mypy-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-
            mypy-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Run format check
        run: poetry run ruff format --check .

      - name: Run linting
        run: poetry run ruff check .

      - name: Run type checking
        run: poetry run mypy .

      - name: Run tests with coverage
        run: |
          poetry run pytest \
            --cov=src \
            --cov=config \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=95 \
            -m "not network"

      - name: Upload coverage reports
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella


  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Cache MyPy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-sonar-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            mypy-sonar-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-
            mypy-sonar-${{ runner.os }}-

      - name: Run tests with coverage for SonarQube
        run: |
          poetry run pytest \
            --cov=src \
            --cov=config \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=95 \
            -m "not network"
        env:
          COVERAGE_FILE: .coverage

      - name: Verify coverage report exists
        run: |
          ls -la coverage.xml
          echo "Coverage report size: $(wc -l coverage.xml)"

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.projectKey=barry47products_fastapi-template
            -Dsonar.organization=barry47products
            -Dsonar.exclusions=tests/**/*
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=src,config
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Docker build test for pull requests
  docker-build-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Build and run a quick test
          docker build -t test-image -f deployment/Dockerfile .

          # Test that the image starts correctly
          docker run --rm --name test-container -d \
            -e ENVIRONMENT=test \
            -e DATABASE_URL=sqlite:///test.db \
            test-image

          # Wait a moment for startup
          sleep 5

          # Check if container is still running
          if docker ps | grep -q test-container; then
            echo "✅ Container started successfully"
            docker stop test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi

      - name: Run Docker Compose test
        run: |
          # Test docker-compose configuration
          docker-compose -f deployment/docker-compose.yml config

          # Test that services can start (without running them)
          docker-compose -f deployment/docker-compose.yml config --services
