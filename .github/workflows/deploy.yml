name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'config/**'
      - 'Dockerfile'
      - 'docker-compose.prod.yml'
      - 'pyproject.toml'
      - 'poetry.lock'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality gate - must pass before deployment
  quality-gate:
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-deploy-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run quality checks
        run: |
          poetry run ruff format --check .
          poetry run ruff check .
          poetry run mypy .

      - name: Run tests with coverage
        run: |
          poetry run pytest \
            --cov=src \
            --cov=config \
            --cov-report=term-missing \
            --cov-fail-under=95 \
            -m "not network"

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && (needs.quality-gate.result == 'success' || inputs.force_deploy)
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable=${{ inputs.environment == 'staging' }}
            type=raw,value=production,enable=${{ inputs.environment == 'production' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail on vulnerabilities for now

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      always() &&
      needs.build-and-push.result == 'success' &&
      (github.ref == 'refs/heads/main' || inputs.environment == 'staging')

    environment:
      name: staging
      url: https://staging.yourapp.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

          # Here you would add your actual staging deployment logic
          # Examples:
          # - SSH to staging server and run docker-compose
          # - Use kubectl to deploy to staging cluster
          # - Call cloud provider APIs

          echo "âœ… Staging deployment completed"

      - name: Run staging smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests against staging"

          # Example smoke tests
          # curl -f https://staging.yourapp.com/status
          # curl -f https://staging.yourapp.com/health

          echo "âœ… Smoke tests passed"

      - name: Notify deployment
        if: always()
        run: |
          echo "ðŸ“¢ Staging deployment notification"
          echo "Status: ${{ job.status }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"

  # Deploy to production (manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-staging]
    if: |
      always() &&
      needs.build-and-push.result == 'success' &&
      needs.deploy-staging.result == 'success' &&
      (inputs.environment == 'production' || github.ref == 'refs/heads/main')

    environment:
      name: production
      url: https://api.yourapp.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create deployment directory
        run: mkdir -p deployment

      - name: Generate production deployment manifest
        run: |
          cat > deployment/docker-compose.override.yml << 'EOF'
          services:
            api:
              image: ${{ needs.build-and-push.outputs.image-tag }}
              environment:
                - BUILD_SHA=${{ github.sha }}
                - BUILD_REF=${{ github.ref_name }}
                - DEPLOYED_AT=${{ github.event.head_commit.timestamp }}
          EOF

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "SHA: ${{ github.sha }}"

          # Here you would add your actual production deployment logic
          # Examples:
          # - Use your deployment script: ./scripts/deployment/deploy-prod.sh
          # - Deploy to cloud provider
          # - Rolling update to production cluster

          echo "âœ… Production deployment completed"

      - name: Run production health checks
        run: |
          echo "ðŸ©º Running production health checks"

          # Production health verification
          # curl -f https://api.yourapp.com/status
          # curl -f https://api.yourapp.com/health

          echo "âœ… Production health checks passed"

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Notify successful deployment
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          echo "ðŸ”— Application: https://api.yourapp.com"
          echo "ðŸ“Š Monitoring: https://grafana.yourapp.com"

  # Rollback capability
  rollback-production:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]

    environment:
      name: production
      url: https://api.yourapp.com

    steps:
      - name: Rollback production deployment
        run: |
          echo "ðŸ”„ Rolling back production deployment"

          # Rollback logic here
          # - Revert to previous image tag
          # - Run rollback script

          echo "âœ… Rollback completed"
