[tool.poetry]
name = "fastapi-template"
version = "0.1.0"
description = "Clean architecture FastAPI template with observability, testing, and best practices"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "src"}, {include = "config"}]

[tool.poetry.dependencies]
python = "^3.13"
pydantic = "^2.10.0"
pydantic-settings = "^2.6.0"
fastapi = "^0.116.1"
uvicorn = "^0.35.0"
structlog = "^25.4.0"
prometheus-client = "^0.22.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
black = "^24.10.0"
isort = "^5.13.0"
ruff = "^0.8.0"
mypy = "^1.13.0"
pre-commit = "^4.0.0"
pytest-watch = "^4.2.0"
bandit = "^1.8.6"
httpx = "^0.28.1"
types-pyyaml = "^6.0.12.20250822"
pytest-xdist = "^3.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py313']
exclude = 'scripts/'

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = ["scripts/"]

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "S", "B", "A", "COM", "C4"]  # Import linting enabled
ignore = ["I001"]  # Let isort handle import sorting, but keep other import rules

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S102", "S104", "S105", "S106"]  # Allow assert usage, exec, host binding, and hardcoded passwords in tests
"src/shared/exceptions.py" = ["N818"]  # Allow Exception suffix for domain clarity
"src/main.py" = ["S104"]  # Allow binding to all interfaces for development server
"src/infrastructure/observability/*" = ["S110"]  # Allow try-except-pass for service registry transition
"src/infrastructure/security/*" = ["S110"]  # Allow try-except-pass for service registry transition  
"src/infrastructure/feature_flags/*" = ["S110"]  # Allow try-except-pass for service registry transition
"src/infrastructure/persistence/*" = ["S110"]  # Allow try-except-pass for service registry transition
"src/interfaces/api/routers/*" = ["B008"]  # Allow FastAPI Depends() pattern in routers
"src/interfaces/api/dependencies/*" = ["B008"]  # Allow FastAPI Depends() pattern in dependencies

[tool.flake8]
max-line-length = 100

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]
exclude = ["scripts/"]

[[tool.mypy.overrides]]
module = "structlog.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "prometheus_client.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.infrastructure.observability.logger"
warn_return_any = false

[[tool.mypy.overrides]]
module = "fastapi.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "uvicorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.main"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
warn_return_any = false
disallow_any_expr = false

[[tool.mypy.overrides]]
module = "google.cloud.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "whatsapp_api_client_python.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.infrastructure.persistence.*"
warn_return_any = false
disallow_untyped_calls = false

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "config", "tests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--durations=10",
]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    # Test Speed Categories
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (select with '-m fast')",
    
    # Test Type Categories  
    "unit: marks tests as unit tests (isolated, no external dependencies)",
    "integration: marks tests as integration tests (multiple components)",
    "contract: marks tests as contract/API tests (external interface validation)",
    "e2e: marks tests as end-to-end tests (full system)",
    
    # Test Category by Purpose
    "behaviour: marks tests as behaviour-driven tests (business logic validation)", 
    "resilience: marks tests as resilience tests (error handling, edge cases)",
    "security: marks tests as security tests (authentication, authorization)",
    
    # Infrastructure Categories
    "database: marks tests that require database access",
    "network: marks tests that require network access", 
    "filesystem: marks tests that require filesystem access",
    "external_api: marks tests that call external APIs",
    
    # Business Domain Categories  
    "whatsapp: marks tests related to WhatsApp functionality",
    "nlp: marks tests related to natural language processing",
    "endorsement: marks tests related to endorsement processing",
    "provider: marks tests related to provider management",
    
    # Special Test Categories
    "smoke: marks tests as smoke tests (basic functionality checks)",
    "regression: marks tests as regression tests (prevent known issues)",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src", "config"]
branch = true
omit = ["*/tests/*", "*/conftest.py", "*/__init__.py"]

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_covered = false

[tool.pylint."messages control"]
disable = [
    "C0415",  # import-outside-toplevel
    "W0613",  # unused-argument  
    "W0212",  # protected-access
    "W0718",  # broad-exception-caught
    "W0122",  # exec-used
    "E1101",  # no-member (Pylint doesn't understand Pydantic dynamic attributes)
    "R0903",  # too-few-public-methods (common in test classes and data classes)
    "E0110",  # abstract-class-instantiated (intentional in tests to verify abstract behaviour)
]