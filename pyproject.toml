[tool.poetry]
name = "fastapi-template"
version = "0.1.0"
description = "Clean architecture FastAPI template with observability, testing, and best practices"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "src"}, {include = "config"}]

[tool.poetry.dependencies]
python = "^3.13"
pydantic = "^2.11.9"
pydantic-settings = "^2.6.0"
fastapi = "^0.117.1"
uvicorn = "^0.36.0"
structlog = "^25.4.0"
prometheus-client = "^0.23.1"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.36"}
redis = {extras = ["hiredis"], version = "^6.4.0"}
google-cloud-firestore = "^2.19.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^1.2.0"
pytest-cov = "^6.0.0"
ruff = "^0.13.1"
mypy = "^1.18.2"
pre-commit = "^4.0.0"
pytest-watch = "^4.2.0"
httpx = "^0.28.1"
types-pyyaml = "^6.0.12.20250822"
pytest-xdist = "^3.8.0"

# Database dependencies for development and testing
[tool.poetry.group.postgres]
optional = true

[tool.poetry.group.postgres.dependencies]
asyncpg = "^0.30.0"
alembic = "^1.14.0"

[tool.poetry.group.redis]
optional = true

[tool.poetry.group.redis.dependencies]
# Redis is included as main dependency above

[tool.poetry.group.firestore]
optional = true

[tool.poetry.group.firestore.dependencies]
# google-cloud-firestore is included as main dependency above
grpcio = "^1.68.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Streamlined Ruff configuration focused on critical code quality
line-length = 100
target-version = "py313"
src = ["src", "config", "tests"]

[tool.ruff.lint]
# Core rules for production-ready code
select = [
    # Critical errors and code quality
    "F",      # Pyflakes (undefined names, unused imports)
    "E",      # pycodestyle errors (whitespace, indentation)
    "I",      # isort (import sorting)
    "N",      # pep8-naming (naming conventions)
    "UP",     # pyupgrade (modern Python syntax)
    "S",      # flake8-bandit (security)
    "B",      # flake8-bugbear (likely bugs and anti-patterns)
    "SIM",    # flake8-simplify (code simplification)
    "RUF",    # Ruff-specific rules (best practices)
]

# Essential ignore rules for practical development
ignore = [
    "E501",    # Line too long (formatter handles this)
    "S101",    # Use of assert (needed for tests)
    "COM812",  # Missing trailing comma (formatter handles)
    "ISC001",  # Conflicts with formatter
    "RUF100",  # Unused noqa directives (template code)
    "SIM108",  # Use ternary operator (template readability)
    "B904",    # Raise from err (template simplicity)
]

# Minimal per-file ignores for specific contexts
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Asserts are fine in tests
    "S104",    # Host binding okay in tests
    "S105",    # Hardcoded passwords okay in tests
    "S106",    # Hardcoded passwords in tests
]
"src/main.py" = ["S104"]  # Allow binding to all interfaces for development
"src/shared/exceptions.py" = ["N818"]  # Allow Exception suffix for domain clarity
"src/infrastructure/observability/*" = ["S110"]  # Allow try-except-pass for service graceful degradation
"src/interfaces/api/routers/*" = ["B008"]  # Allow FastAPI Depends() pattern
"src/interfaces/api/dependencies/*" = ["B008"]  # Allow FastAPI Depends() pattern

[tool.ruff.lint.isort]
known-first-party = ["src", "config", "tests"]

[tool.ruff.format]
# Formatting settings (replaces Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.mypy]
# MyPy configuration for strict type checking
python_version = "3.13"
plugins = ["pydantic.mypy"]

# Strictness flags
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
strict_equality = true
strict_concatenate = true

# Import discovery
namespace_packages = true
explicit_package_bases = true
mypy_path = "$MYPY_CONFIG_FILE_DIR"

# Error presentation
show_error_codes = true
show_error_context = true
pretty = true
color_output = true

# Performance optimisations
cache_fine_grained = true
skip_version_check = true
sqlite_cache = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
# Less strict for tests
disallow_untyped_defs = false
disallow_untyped_decorators = false
disallow_any_generics = false
warn_return_any = false

[[tool.mypy.overrides]]
module = [
    # Third-party libraries without stubs
    "structlog.*",
    "prometheus_client.*",
    "fastapi.*",
    "uvicorn.*",
    "google.cloud.*",
    "whatsapp_api_client_python.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.main"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "src.infrastructure.observability.logger"
warn_return_any = false

[[tool.mypy.overrides]]
module = "src.infrastructure.persistence.*"
warn_return_any = false
disallow_untyped_calls = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--durations=10",
    "--show-capture=all",
    "-s",
]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    # Test Speed Categories
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (select with '-m fast')",

    # Test Type Categories
    "unit: marks tests as unit tests (isolated, no external dependencies)",
    "integration: marks tests as integration tests (multiple components)",
    "contract: marks tests as contract/API tests (external interface validation)",
    "e2e: marks tests as end-to-end tests (full system)",

    # Test Category by Purpose
    "behaviour: marks tests as behaviour-driven tests (business logic validation)",
    "resilience: marks tests as resilience tests (error handling, edge cases)",
    "security: marks tests as security tests (authentication, authorization)",

    # Infrastructure Categories
    "database: marks tests that require database access",
    "network: marks tests that require network access",
    "filesystem: marks tests that require filesystem access",
    "external_api: marks tests that call external APIs",

    # Business Domain Categories
    "whatsapp: marks tests related to WhatsApp functionality",
    "nlp: marks tests related to natural language processing",
    "endorsement: marks tests related to endorsement processing",
    "provider: marks tests related to provider management",

    # Special Test Categories
    "smoke: marks tests as smoke tests (basic functionality checks)",
    "regression: marks tests as regression tests (prevent known issues)",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src", "config"]
branch = true
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__init__.py",
    "src/infrastructure/persistence/repositories/sample_product_repository.py",
    "src/infrastructure/persistence/repositories/sample_user_repository.py",
    "src/infrastructure/messaging/sample_notification_service.py",
    "src/application/services/sample_service.py",
    "src/interfaces/api/routers/sample_routes.py"
]

[tool.coverage.report]
fail_under = 95
show_missing = true
skip_covered = false

[tool.coverage.xml]
output = "coverage.xml"
